{
    "collab_server" : "",
    "contents" : "##################### 1. simulate data (You don't have to repeat this step, just to make some data for the script) #####################\n## here I assume we have 50 American African (AFR), 200 Caucassian (CEU) and 30 Hispanic (AMR), 20 Asian (AS) popultaion\n## I will randomly simulate some data to represent the number of high/low/moderate impact SNVs across 5K genes\n## I will simulate the number of mutations by a poisson simulation: number_of_SNVs ~ pois(lamda=3)\n# set the simualtion seed to make data reproducible\nset.seed(1)\ndata_AFR = t(sapply(1:5000,function(x)rpois(50,3)))\ncolnames(data_AFR) = paste0(\"AFR\",seq(1:50))\ndata_CEU = t(sapply(1:5000,function(x)rpois(200,3)))\ncolnames(data_CEU) = paste0(\"CEU\",seq(1:200))\ndata_AMR = t(sapply(1:5000,function(x)rpois(30,3)))\ncolnames(data_AMR) = paste0(\"AMR\",seq(1:30))\ndata_AS = t(sapply(1:5000,function(x)rpois(20,3)))\ncolnames(data_AS) = paste0(\"AS\",seq(1:20))\n\n## manually create some 20 genes with enrichment of SNVs in AFR\nenrich_idx = sort(sample(1:5000,20))\ndata_AFR[enrich_idx,] = rpois(50,10)\n\ndata = cbind(data_AFR,data_CEU,data_AMR,data_AS)\nrownames(data) = paste0(\"gene\",seq(1:5000))\nsaveRDS(data,file=\"data.RDS\")\nsaveRDS(enrich_idx,file=\"enrich_idx.RDS\")\n\n##################### 2. Permutation Test #####################\n# The idea of permutation is to shuffle the data inside the sample for a lot of times to get a distriubution representing randomness.\n# If what we observed is off the distribution of randomness, then it means there is selection (enrichment/depletion...) in the data.\n# Actually there are other ways than permutation to test such enrichment, for example, Chi-square test, odds-ratio...\n\n################################################################################\n##### A small piece of script to test the permutation I will do is correct #####\n# here I use the function sample to shuffle the data points across the samples\n# I also used the function \"apply\" to avoid loop through the data matrix\ndata_permute = t(apply(data,1,sample))\ncolnames(data_permute) = colnames(data)\n# you can check the first few rows to see that the data is shuffled\ndata[1:5,1:5]\ndata_permute[1:5,1:5]\n# you also can make sure that the data points are actually the same, just the position shuffled\nt1 = table(data[1,])\nt2 = table(data_permute[1,])\nt1 \nt2\n\nall.equal(t1,t2)\n################################################################################\n\n##############################ACTUAL PERMUTATION################################\n# you can start by loading the data I simulated\ndata = readRDS(file=\"data.RDS\")\nenrich_idx = readRDS(file=\"../Gerenal_Script/enrich_idx.RDS\")\n\n## here I will permute 500 times (A typical number of permutation should be ~1000, \n## because if your distribution of randomness consists of 1000 times of permutation, \n## and your observation is out of the distribution, you can claim p<1/1000, \n## to get the statistical significance,the typical permutation would be >100 times)\n\nAFR_mean = NULL\nCEU_mean = NULL\nAMR_mean = NULL\nAS_mean = NULL\n\nfor (i in 1:500){\n    if(i%%100==0) print(i)\n    tmp_data = t(apply(data,1,sample))\n    \n    # here instead of collect the permuated data everytime,\n    # we will only collect statistical values to save memory\n    # we will collect median/mean of number of SNVs in that gene\n    # in each population (or other values you are interested in) \n    \n    sub_AFR_mean = apply(tmp_data[,1:50],1,mean)\n    sub_CEU_mean = apply(tmp_data[,51:250],1,mean)\n    sub_AMR_mean = apply(tmp_data[,251:280],1,mean)\n    sub_AS_mean = apply(tmp_data[,281:300],1,mean)\n    \n    AFR_mean = cbind(AFR_mean, sub_AFR_mean)\n    CEU_mean = cbind(CEU_mean, sub_CEU_mean)\n    AMR_mean = cbind(AMR_mean, sub_AMR_mean)\n    AS_mean = cbind(AS_mean,sub_AS_mean)\n}\n## the result say AFR_mean\n## each column is the statistics from one permutation, each row is the sampled distribution of randomness\ncolnames(AFR_mean) = paste0(\"permute\",seq(1:500))\nrownames(AFR_mean) = paste0(\"gene\",seq(1:5000))\ncolnames(CEU_mean) = paste0(\"permute\",seq(1:500))\nrownames(CEU_mean) = paste0(\"gene\",seq(1:5000))\ncolnames(AMR_mean) = paste0(\"permute\",seq(1:500))\nrownames(AMR_mean) = paste0(\"gene\",seq(1:5000))\ncolnames(AS_mean) = paste0(\"permute\",seq(1:500))\nrownames(AS_mean) = paste0(\"gene\",seq(1:5000))\n\n### next we gonna compute the observation statistics we have\nob_AFR_mean = apply(data[,1:50],1,mean)\nob_CEU_mean = apply(data[,51:250],1,mean)\nob_AMR_mean = apply(data[,251:280],1,mean)\nob_AS_mean = apply(data[,281:300],1,mean)\n\n### so we can compute the p value now\np_AFR_enrichment = sapply(1:5000,function(x)sum(ob_AFR_mean[x]<AFR_mean[x,])/500)\np_CEU_enrichment = sapply(1:5000,function(x)sum(ob_CEU_mean[x]<CEU_mean[x,])/500)\np_AMR_enrichment = sapply(1:5000,function(x)sum(ob_AMR_mean[x]<AMR_mean[x,])/500)\np_AS_enrichment = sapply(1:5000,function(x)sum(ob_AS_mean[x]<AS_mean[x,])/500)\n\n# we will see if where the enrichment are, you can set your sinificant level, \n# here I will use 1 out of 500\nwhich(p_AFR_enrichment<1/500)\nwhich(p_CEU_enrichment<1/500)\nwhich(p_AMR_enrichment<1/500)\nwhich(p_AS_enrichment<1/500)\n\n# let's take a look at the index I set to be enriched in AFR again\nenrich_idx\nwhich(p_AFR_enrichment<1/500)\n\n# we could see there are few more genes enriched than what I simulated, it could be true enrichment during the simulation,\n# it also could be false positives due to statistical test. But somehow, we detected all the signal I set to be true positives\n# so we can get a list of candidate gene with statsitical significance here.\n\n\n\n",
    "created" : 1507651244779.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1996490177",
    "id" : "9B7F20B7",
    "lastKnownWriteTime" : 1507658031,
    "last_content_update" : 1507658031172,
    "path" : "~/Documents/Git/CRC_basics/General_Script/Permutation_Template_for_Taylor.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}