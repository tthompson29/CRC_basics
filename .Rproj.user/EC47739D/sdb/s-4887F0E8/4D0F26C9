{
    "collab_server" : "",
    "contents" : "---\n title: \"CRC work\"\n author: \"Taylor\"\n date: \"9/22/2017\"\n output: html_document\n ---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\ninstall.packages(\"rmarkdown\")\nlibrary(rmarkdown)\n#library(BiocLite)\n#install.packages(\"genelib\")\n#library(genefilter)\n#install.packages(\"genefilter\")\n\noptions(stringsAsFactors = FALSE)\n```\n\n## R Markdown\n This is the basic file format for the for loop I will be runnin g on each table the make sure that there is a \n  files <- list.files(path=\"path/t\", pattern=\"*.txt\", full.names=T, recursive=FALSE)\n  lapply(files, function(x) {\n    t <- read.table(x, header=F) # load file\n    # apply function\n   \n    out <- function(t)\n      # write to file\n      write.table(out, \"path/to/output\", sep=\"\\t\", quote=F, row.names=F, col.names=T)\n  })\n#Begin work here\nThe first thing was to create a list of all the genes mutated in a specific pattern\nStarted with samples passed by Somatic Mutation caller using MuTect_2\nThen greped each file for the SNV mutations\nafter that seperated for impact from High to low or Modifier\n```{r}\nfiles_snvh <- list.files(path=\"/Volumes/home/greally-lab/T_Trial/Tables\", pattern=\"*_pSNVHIGH.txt\", full.names=T, recursive=FALSE)\n  lapply(files_snvh, function(x){\n  # print(basename)\n    filename <- x\n    #basename <- gsub(\".*/Volumes/home/greally-lab/T_Trial/Tables/\", \"\", filename)\n    #colnames(y) <-(\"counts\", basename)\n    if(file.size(x)>0){\n        t <- read.table(x, header=F)\n      blue_genes <-as.vector(t$V2) \n      out <- blue_genes[!duplicated(blue_genes)]\n      print(blue_genes)\n      write.table(out, \"out_snvh.txt\", append = TRUE, sep=\"\\t\", na =\"NA\", quote=F, col.names= tools::file_path_sans_ext(basename(filename)))\n        }\n    })\n```\n#Create genelist from input information\n```{r}\nbutt = read.delim(\"/Volumes/home/greally-lab/T_Trial/Tables/out_3.txt\", header = F)\n#butt_3 <- read.delim(\"out_snvh.txt\", header = F)\ngenes <- as.matrix(butt$V2[!duplicated(butt$V2)]) \ngenelist <- as.matrix(sort(genes))\n#removed the first empty row\ngenelist <- as.matrix(sort(genes[2:length(genes)]))\ncolnames(genelist) <- c(\"GENES\")\ndim(genelist)\nwrite.csv(genelist, \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvh.csv\")\nsaveRDS(file, file = \"/Volumes/home/greally-lab/T_Trial/Tables/file.Rds\")\nsaveRDS(genelist, file = \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvh.Rds\")\n```\n#for each file read in the file, loop for column 2 in genelist, if the names match output file column 1, else output 0\nSNVHigh Pass is the test directory\nRepeat the code for all other modifier patterns\n```{r}\n#SNV MODIFIER\nfiles_snvm <- list.files(path=\"/Volumes/home/greally-lab/T_Trial/Tables\", pattern=\"*_pSNVMOD.txt\", full.names=T, recursive=FALSE)\ntoy_snvm <- files_snvm[1:10]\nlapply(files_snvm, function(x){\n    if(file.size(x)>0){\n      t <- read.table(x, header=F, fill = TRUE)\n      #some files have blanks so have to remove the blanks\n        if(t[1,2] == \"\"){\n          t <- t[2:nrow(t),]\n        }\n      blue_genes <-as.vector(t$V2) \n      out <- blue_genes[!duplicated(blue_genes)]\n      #print(blue_genes)\n      write.table(out, \"/Volumes/home/greally-lab/T_Trial/Tables/out_snvm.txt\", append = TRUE, sep=\"\\t\", na =\"NA\", quote=F,col.names= tools::file_path_sans_ext(basename(x)))\n        }\n})\n#Creating the list of genes\nbutt = read.delim(\"/Volumes/home/greally-lab/T_Trial/Tables/out_snvm.txt\", header = F)\ngenes_snvm <- as.matrix(butt$V2[!duplicated(butt$V2)]) \n#genelist_snvm <- as.data.frame(sort(genes_snvm[2]))\nhead(genes_snvm)\n#removed the first empty row\ngenelist_snvm <- as.matrix(sort(genes_snvm[2:length(genes_snvm)]))\ncolnames(genelist_snvm) <- c(\"GENES\")\nhead(genelist_snvm)\n#write.csv(genelist_snvm, \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvm.csv\")\n#Saving the varables\nsaveRDS(files_snvm, file = \"/Volumes/home/greally-lab/T_Trial/Tables/files_snvm.Rds\")\nsaveRDS(genelist_snvm, file = \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvm.Rds\")\n\n\n\n#SNVLOW\nfiles_snvl <- list.files(path=\"/Volumes/home/greally-lab/T_Trial/Tables\", pattern=\"*_pSNVLOW.txt\", full.names=T, recursive=FALSE)\ntoy_snvl <- files_snvl[1:10]\nlapply(files_snvl, function(x){\n    if(file.size(x)>0){\n      t <- read.table(x, header=F, fill = TRUE)\n      #some files have blanks so have to remove the blanks\n        if(t[1,2] == \"\"){\n          t <- t[2:nrow(t),]\n        }\n      blue_genes <-as.vector(t$V2) \n      out <- blue_genes[!duplicated(blue_genes)]\n      #print(blue_genes)\n      write.table(out, \"/Volumes/home/greally-lab/T_Trial/Tables/out_snvl.txt\", append = TRUE, sep=\"\\t\", na =\"NA\", quote=F,col.names= tools::file_path_sans_ext(basename(x)))\n        }\n})\n#Creating the list of genes\nbutt_snvl = read.delim(\"/Volumes/home/greally-lab/T_Trial/Tables/out_snvl.txt\", header = F)\ngenes_snvl <- as.matrix(butt_snvl$V2[!duplicated(butt_snvl$V2)]) \n#genelist_snvl <- as.data.frame(sort(genes_snvl[2]))\nhead(genes_snvl)\n#removed the first empty row \n#MAKE SURE THIS WORKS\ngenelist_snvl <- as.matrix(sort(genes_snvl[2:length(genes_snvl)]))\ndim(genelist_snvl)\ncolnames(genelist_snvl) <- c(\"GENES\")\nhead(genelist_snvl)\n#write.csv(genelist_snvl, \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvl.csv\")\n#Saving the varables\nsaveRDS(files_snvl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/files_snvl.Rds\")\nsaveRDS(genelist_snvl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvl.Rds\")\n\n#INDEL HIGH\nfiles_IDH <- list.files(path=\"/Volumes/home/greally-lab/T_Trial/Tables\", pattern=\"*_pINDELHIGH.txt\", full.names=T, recursive=FALSE)\ntoy_IDH <- files_IDH[1:10]\nlapply(files_IDH, function(x){\n    if(file.size(x)>0){\n      t <- read.table(x, header=F, fill = TRUE)\n      #some files have blanks so have to remove the blanks\n        if(t[1,2] == \"\"){\n          t <- t[2:nrow(t),]\n        }\n      blue_genes <-as.vector(t$V2) \n      out <- blue_genes[!duplicated(blue_genes)]\n      #print(blue_genes)\n      write.table(out, \"/Volumes/home/greally-lab/T_Trial/Tables/out_IDH.txt\", append = TRUE, sep=\"\\t\", na =\"NA\", quote=F,col.names= tools::file_path_sans_ext(basename(x)))\n        }\n})\n#Creating the list of genes\nbutt = read.delim(\"/Volumes/home/greally-lab/T_Trial/Tables/out_IDH.txt\", header = F)\ngenes_IDH <- as.matrix(butt$V2[!duplicated(butt$V2)]) \n#genelist_IDH <- as.data.frame(sort(genes_IDH[2]))\nhead(genes_IDH)\n#removed the first empty row\ngenelist_IDH <- as.matrix(sort(genes_IDH[2:length(genes_IDH)]))\ncolnames(genelist_IDH) <- c(\"GENES\")\nhead(genelist_IDH)\n#write.csv(genelist_IDH, \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_IDH.csv\")\n#Saving the varables\nsaveRDS(files_IDH, file = \"/Volumes/home/greally-lab/T_Trial/Tables/files_IDH.Rds\")\nsaveRDS(genelist_IDH, file = \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_IDH.Rds\")\n\n#INDEL LOW\nfiles_IDL <- list.files(path=\"/Volumes/home/greally-lab/T_Trial/Tables\", pattern=\"*_pINDELLOW.txt\", full.names=T, recursive=FALSE)\ntoy_IDL <- files_IDL[1:10]\nlapply(files_IDL, function(x){\n    if(file.size(x)>0){\n      t <- read.table(x, header=F, fill = TRUE)\n      #some files have blanks so have to remove the blanks\n        if(t[1,2] == \"\"){\n          t <- t[2:nrow(t),]\n        }\n      blue_genes <-as.vector(t$V2) \n      out <- blue_genes[!duplicated(blue_genes)]\n      #print(blue_genes)\n      write.table(out, \"/Volumes/home/greally-lab/T_Trial/Tables/out_IDL.txt\", append = TRUE, sep=\"\\t\", na =\"NA\", quote=F,col.names= tools::file_path_sans_ext(basename(x)))\n        }\n})\n#Creating the list of genes\nbutt = read.delim(\"/Volumes/home/greally-lab/T_Trial/Tables/out_IDL.txt\", header = F)\ngenes_IDL <- as.matrix(butt$V2[!duplicated(butt$V2)]) \n#genelist_IDL <- as.data.frame(sort(genes_IDL[2]))\nhead(genes_IDL)\n#removed the first empty row\ngenelist_IDL <- as.matrix(sort(genes_IDL[2:length(genes_IDL)]))\ncolnames(genelist_IDL) <- c(\"GENES\")\nhead(genelist_IDL)\n#write.csv(genelist_IDL, \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_IDL.csv\")\n#Saving the varables\nsaveRDS(files_IDL, file = \"/Volumes/home/greally-lab/T_Trial/Tables/files_IDL.Rds\")\nsaveRDS(genelist_IDL, file = \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_IDL.Rds\")\n\n#INDEL MODIFIER  GENE LIST\nfiles_IDM <- list.files(path=\"/Volumes/home/greally-lab/T_Trial/Tables\", pattern=\"*_pINDELMOD.txt\", full.names=T, recursive=FALSE)\ntoy_IDM <- files_IDM[1:10]\nlapply(files_IDM, function(x){\n    if(file.size(x)>0){\n      t <- read.table(x, header=F, fill = TRUE)\n      #some files have blanks so have to remove the blanks\n        if(t[1,2] == \"\"){\n          t <- t[2:nrow(t),]\n        }\n      blue_genes <-as.vector(t$V2) \n      out <- blue_genes[!duplicated(blue_genes)]\n      #print(blue_genes)\n      write.table(out, \"/Volumes/home/greally-lab/T_Trial/Tables/out_IDM.txt\", append = TRUE, sep=\"\\t\", na =\"NA\", quote=F,col.names= tools::file_path_sans_ext(basename(x)))\n        }\n})\n#Creating the list of genes\nbutt = read.delim(\"/Volumes/home/greally-lab/T_Trial/Tables/out_IDM.txt\", header = F)\ngenes_IDM <- as.matrix(butt$V2[!duplicated(butt$V2)]) \n#genelist_IDM <- as.data.frame(sort(genes_IDM[2]))\nhead(genes_IDM)\n#removed the first empty row\ngenelist_IDM <- as.matrix(sort(genes_IDM[2:length(genes_IDM)]))\ncolnames(genelist_IDM) <- c(\"GENES\")\nhead(genelist_IDM)\n#write.csv(genelist_IDM, \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_IDM.csv\")\n#Saving the varables\nsaveRDS(files_IDM, file = \"/Volumes/home/greally-lab/T_Trial/Tables/files_IDM.Rds\")\nsaveRDS(genelist_IDM, file = \"/Volumes/home/greally-lab/T_Trial/Tables/genelist_IDM.Rds\")\n```\n```{r MASTER Gene list}\ngenelist_snvh <- readRDS(\"/Volumes/home/greally-lab/T_Trail/Tables/genelist_snvh.Rds\")\ngenelist_snvl <- readRDS(\"/Volumes/home/greally-lab/T_Trail/Tables/genelist_snvl.Rds\")\ngenelist_snvm <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvm.Rds\")\ngenelist_IDH <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/genelist_IDH.Rds\")\ngenelist_IDL <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/genelist_IDL.Rds\")\ngenelist_IDM <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/genelist_IDM.Rds\")\n\nfull_gene_list <- rbind(genelist_snvh, genelist_snvl, genelist_snvm, genelist_IDM,genelist_IDH, genelist_IDL)\nfull_gene_list <- full_gene_list[!duplicated(full_gene_list)]\nfull_gene_list <- as.data.frame(full_gene_list)\ncolnames(full_gene_list) <- c(\"GENES\")\nhead(full_gene_list)\nsaveRDS(full_gene_list,file = \"/Volumes/home/greally-lab/T_Trial/Tables/full_genelist.Rds\")\n\n```\n```{r}\n#first atttempt Code \nfiles <- list.files(path=\"/Volumes/home/greally-lab/T_Trial/Tables\", pattern=\"*_pSNVHIGH.txt\", full.names=T, recursive=FALSE)\n  \n    #set table once then run it\ngenelist_snvh <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvh.Rds\")\n        #snv_table_f <-as.data.frame(genelist)\n        #snvh_temp <- as.data.frame(cbind(genelist,0))\ncol<- length(files)\nro <- length(genelist_snvh)\n    snvh_list <- data.frame()\n    snvh_table <- data.frame(nrow = ro,ncol = col)\n    tab<- matrix(nrow = ro, ncol = 1)\n    #snvh_tab is a table that will be changed each time I should define it out of the bounds of the loop\nsnvh_tab <- as.data.frame(rep(0,ro), row.names =genelist_snvh) \n    \n \n    base <- list()\n    #named <- list()\n    # tried doing a for loop instead of lapply\n  for(j in 1:length(toy)){\n    # This is doing hte same thing it was doing when I put it at the end. It goes 1, then ,1,2, then 1,2,3 instead of 1. 2. 3. \n      fil <- toy[j]\n      #creating variables to include the names of each patient along with each table read in. If not I can make this a vectore for later table naming\n      base[j] <- tools::file_path_sans_ext(basename(fil))\n      named[j] <- c(\"counts\",base[j])\n      #if the file is larger than 0 read in the file as a table with 2 columns, column 1 is the counts, column 2(V2) are the gene names\n        if (file.size(fil)>0){\n          tab <- read.table(fil, header=F)\n          View(tab)\n          print(paste0(base,\"is greater than 0\"))\n          #Check to see which are greater than 0\n            gene<-tab$V2\n            counts<-tab$V1\n            #Checkpoint to print out genes and counts for each\n            print(gene)\n            print(counts)\n            #created a temparary column that was full of zeros\n            #created temporary table for matching\n        }\n  }\n            temp_col <- as.data.frame(rep(0,6645))\n            snvh_temp <-cbind(genelist_snvh,0)\n                for (i in 1:length(gene)){\n                  match <- charmatch(gene[i],genelist)\n                  print(match)\n                  snvh_temp[match,2] <- counts[i]\n                }\n            temp_col <- snvh_temp[,2]\n              #temp_col[match] <- counts[i]\n              #View(temp_col)\n            snvh_tab <- merge(snvh_tab,temp_col)\n            View(snvh_tab)\n        }\n      else{\n      #otherwise temp-col should just be a bunch of zeros\n      temp_col <- as.data.frame(rep(0,6645))\n      snvh_tab <- merge(snvh_tab,temp_col) \n      #}\n      }\n  }\n```\n#SNV High\n```{r}\nfiles_snvh <- list.files(path=\"/Volumes/home/greally-lab/T_Trial/Tables\", pattern=\"*_pSNVHIGH.txt\", full.names=T, recursive=FALSE)\ntoy_2 <- files[1:10]\nten <- files[10]\noptions(stringsAsFactors = FALSE)\ngenelist_snvh <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvh.Rds\")\nfull_gene_list <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/full_genelist.Rds\")\n#snvh_tab <- as.data.frame(rep(0,ro), row.names =genelist_snvh)\n#defining Temp outside of the function to prevent it's repeated emptying\ntemp <- full_gene_list\nsnvh_tabl <- temp\n#x <- files_snvh[355]\nfor (i in 1:length(files_snvh)) {\n  x<- files_snvh[i]\n  base <- tools::file_path_sans_ext(basename(x))\n  base <- gsub(\"_pSNVHIGH\",\"\",base)\n  named <- c(base,\"genes\")\n   if (file.size(x)>0){\n    #print(named)\n    #save each table as a rds then red it back in as a dataframe with column names\n    mini_table <- read.table(x, header =FALSE)\n    #sum(mini_table[,1])\n    colnames(mini_table) <- named\n    column <- merge(temp,mini_table, by.x = \"GENES\",by.y=\"genes\", all=TRUE)\n    column[is.na(column)] <- 0\n    #saveRDS(column,file = \"/Volumes/home/greally-lab/T_Trial/Work/\")\n    #write.table(column,file = \"/Volumes/home/greally-lab/T_Trial/Work/columns_3.txt\", sep = \"\\t\", append = TRUE, col.names = TRUE)\n    snvh_tabl <- merge(snvh_tabl, column, by=\"GENES\", all=TRUE)\n}\n  else{\n    empty_table <- cbind(rep(0,nrow(temp)), temp)\n    #head(empty_table)\n    colnames(empty_table)<-named\n    column <- merge(temp,empty_table, by.x = \"GENES\",by.y=\"genes\",all = TRUE)\n    #View(column)\n    #write.table(column, file = \"/Volumes/home/greally-lab/T_Trial/Work/columns_3.txt\", sep = \"\\t\", append = TRUE, col.names = TRUE)\n    snvh_tabl <- merge(snvh_tabl, column, by=\"GENES\", all=TRUE)\n  #View(snvh_tabl)\n  }\n}\nsaveRDS(snvh_tabl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/snvh_table_full.Rds\")\nsnvh_table <-readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/snvh_table.Rds\")\nsnvh_table_full <-readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/snvh_table_full.Rds\")\nhead(snvh_tabl, 10)\n#check that the second pt column has 11 1s in it\nsum(as.numeric(as.character(snvh_tabl[,356])))\n#check that the 1s are in the correct place\nsnvh_tabl[which(snvh_tabl[,3]==1),]\nclass(snvh_tabl)\nsnvh_tabl <- as.data.frame(snvh_tabl)\n```\n#Repeat the script for each table needed to make\nThe SNVM files may have and empty 1st column so I needed to delete them\nNot sure why they were empty\nThis code took forever. Need to find a new way to do this the\n#SNV MOD\n```{r}\n#Making the table\noptions(stringsAsFactors = FALSE)\nfiles_snvm <- list.files(path=\"/Volumes/home/greally-lab/T_Trial/Tables\", pattern=\"*_pSNVMOD.txt\", full.names=T, recursive=FALSE)\ngenelist_snvm <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvm.Rds\")\n#snvm_tabl <- as.data.frame(rep(0,nrow(genelist_snvm)), row.names =genelist_snvm)\ntoy_snvm <-files_snvm[1:10]\n#defining Temp outside of the function to prevent it's repeated emptying\ntemp <- full_gene_list\nsnvm_tabl <- temp\nx <- files_snvm[203]\nfor (i in 1:length(files_snvm)){\n  x<- files_snvm[i]\n  base <- tools::file_path_sans_ext(basename(x))\n  base <- gsub(\"_pSNVMOD\",\"\",base)\n  named_snvm <- c(base,\"genes\")\n   if (file.size(x)>0){\n    #print(named)\n    #save each table as a rds then red it back in as a dataframe with column names\n    mini_table <- read.table(x, header =FALSE, fill = TRUE)\n    #sum(mini_table[,1])\n    head(mini_table)\n    if(mini_table[1,2] == \"\"){\n          mini_table <- mini_table[2:nrow(mini_table),]\n        }\n    colnames(mini_table) <- named_snvm\n    column <- merge(temp,mini_table, by.x = \"GENES\",by.y=\"genes\", all=TRUE)\n    column[is.na(column)] <- 0\n    snvm_tabl <- merge(snvm_tabl, column, by=\"GENES\", all=TRUE)\n}\n  else{\n    empty_table <- cbind(rep(0,nrow(temp)), temp)\n    #head(empty_table)\n    colnames(empty_table)<-named_snvm\n    column <- merge(temp,empty_table, by.x = \"GENES\",by.y=\"genes\",all = TRUE)\n    snvm_tabl <- merge(snvm_tabl, column, by=\"GENES\", all=TRUE)\n  }\n}\n\nhead(snvm_tabl, 10)\n#check that the second pt column has 11 1s in it\nsum(as.numeric(as.character(snvm_tabl[,204])))\n#check that the 1s are in the correct place\ndim(snvm_tabl)\nsnvm_tabl[which(snvm_tabl[,5]==1),]\nclass(snvm_tabl)\nsnvm_tabl <- as.data.frame(snvm_tabl)\nsaveRDS(snvm_tabl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/snvm_table.Rds\")\nsaveRDS(snvm_tabl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/snvm_table_full.Rds\")\nsnvm_table_full <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/snvm_table_full.Rds\")\n```\n#SNVLow pass\n```{r}\n#Making the table\noptions(stringsAsFactors = FALSE)\ngenelist_snvl <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvl.Rds\")\n#snvl_tabl <- as.data.frame(rep(0,nrow(genelist_snvl)), row.names =genelist_snvl)\ntoy_snvl <-files_snvl[1:10]\n#defining Temp outside of the function to prevent it's repeated emptying\ntemp <- full_gene_list\nsnvl_tabl <- temp\nx <- files_snvl[388]\nfor (i in 1:length(files_snvl)){\n  x<- files_snvl[i]\n  base <- tools::file_path_sans_ext(basename(x))\n  base <- gsub(\"_pSNVLOW\",\"\",base)\n  named_snvl <- c(base,\"genes\")\n   if (file.size(x)>0){\n    #print(named)\n    #save each table as a rds then red it back in as a dataframe with column names\n    mini_table <- read.table(x, header =FALSE, fill = TRUE)\n    #sum(mini_table[,1])\n    if(mini_table[1,2] == \"\"){\n          mini_table <- mini_table[2:nrow(mini_table),]\n        }\n    colnames(mini_table) <- named_snvl\n    column <- merge(temp,mini_table, by.x = \"GENES\",by.y=\"genes\", all=TRUE)\n    column[is.na(column)] <- 0\n    snvl_tabl <- merge(snvl_tabl, column, by= \"GENES\", all=TRUE)\n    head(snvl_tabl)\n}\n  else{\n    empty_table <- cbind(rep(0,nrow(temp)), temp)\n    #head(empty_table)\n    colnames(empty_table)<-named_snvl\n    column <- merge(temp,empty_table, by.x = \"GENES\",by.y=\"genes\",all = TRUE)\n    snvl_tabl <- merge(snvl_tabl, column, by=\"GENES\", all=TRUE)\n  }\n}\n\nhead(snvl_tabl)\n#check that the second pt column has 11 1s in it\nsum(as.numeric(as.character(snvl_tabl[,389])))\n#check that the 1s are in the correct place\ndim(snvl_tabl)\nsnvl_tabl[which(snvl_tabl[,5]==1),]\nclass(snvl_tabl)\nsnvl_tabl <- as.data.frame(snvl_tabl)\n#saveRDS(snvl_tabl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/snvl_table.Rds\")\nsaveRDS(snvl_tabl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/snvl_table_full.Rds\")\n```\n#Indel Section_ INDEL_HIGH\n```{r}\n#Making the table\noptions(stringsAsFactors = FALSE)\ngenelist_IDH <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvh.Rds\")\n#IDH_tabl <- as.data.frame(rep(0,nrow(genelist_IDH)), row.names =genelist_IDH)\ntoy_IDH <-files_IDH[1:10]\n#defining Temp outside of the function to prevent it's repeated emptying\ntemp <- full_gene_list\nIDH_tabl <- temp\nx <- files_IDH[57]\nfor (i in 1:length(files_IDH)){\n  x<- files_IDH[i]\n  base <- tools::file_path_sans_ext(basename(x))\n  base <- gsub(\"_pINDELHIGH\",\"\",base)\n  named_IDH <- c(base,\"genes\")\n   if (file.size(x)>0){\n    #print(named)\n    #save each table as a rds then red it back in as a dataframe with column names\n    mini_table <- read.table(x, header =FALSE, fill = TRUE)\n   #sum(mini_table[,1])\n    if(mini_table[1,2] == \"\"){\n          mini_table <- mini_table[2:nrow(mini_table),]\n        }\n    colnames(mini_table) <- named_IDH\n    column <- merge(temp,mini_table, by.x = \"GENES\",by.y=\"genes\", all=TRUE)\n    column[is.na(column)] <- 0\n    IDH_tabl <- merge(IDH_tabl, column, by=\"GENES\", all=TRUE)\n}\n  else{\n    empty_table <- cbind(rep(0,nrow(temp)), temp)\n    #head(empty_table)\n    colnames(empty_table)<-named_IDH\n    column <- merge(temp,empty_table, by.x = \"GENES\",by.y=\"genes\",all = TRUE)\n    IDH_tabl <- merge(IDH_tabl, column, by=\"GENES\", all=TRUE)\n  }\n}\n\nhead(IDH_tabl, 10)\n#check that the second pt column has 11 1s in it\nsum(as.numeric(as.character(IDH_tabl[,58])))\n#check that the 1s are in the correct place\ndim(IDH_tabl)\nIDH_tabl[which(IDH_tabl[,5]!=0),]\nclass(IDH_tabl)\nIDH_tabl <- as.data.frame(IDH_tabl)\nsaveRDS(IDH_tabl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/IDH_table.Rds\")\nsaveRDS(IDH_tabl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/IDH_table_full.Rds\")\n```\n\n#INDEL MODIFIERS\n```{r}\n#Making the table\noptions(stringsAsFactors = FALSE)\n#Only run if starting here: genelist_IDM <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvh.Rds\")\n#IDM_tabl <- as.data.frame(rep(0,nrow(genelist_IDM)), row.names =genelist_IDM)\ntoy_IDM <-files_IDM[1:10]\n#defining Temp outside of the function to prevent it's repeated emptying\ntemp <- full_gene_list\nIDM_tabl <- temp\nx <- files_IDM[34]\nfor (i in 1:length(files_IDM)){\n  x<- files_IDM[i]\n  base <- tools::file_path_sans_ext(basename(x))\n  base <- gsub(\"_pINDELMOD\",\"\",base)\n  named_IDM <- c(base,\"genes\")\n   if (file.size(x)>0){\n    mini_table <- read.table(x, header =FALSE, fill = TRUE)\n   sum(mini_table[,1])\n   head(mini_table)\n    if(mini_table[1,2] == \"\"){\n          mini_table <- mini_table[2:nrow(mini_table),]\n        }\n    colnames(mini_table) <- named_IDM\n    column <- merge(temp,mini_table, by.x = \"GENES\",by.y=\"genes\", all=TRUE)\n    column[is.na(column)] <- 0\n    IDM_tabl <- merge(IDM_tabl, column, by=\"GENES\", all=TRUE)\n}\n  else{\n    empty_table <- cbind(rep(0,nrow(temp)), temp)\n    #head(empty_table)\n    colnames(empty_table)<-named_IDM\n    column <- merge(temp,empty_table, by.x = \"GENES\",by.y=\"genes\",all = TRUE)\n    IDM_tabl <- merge(IDM_tabl, column, by=\"GENES\", all=TRUE)\n  }\n}\n\nhead(IDM_tabl, 10)\n#check that the second pt column has 11 1s in it\nsum(as.numeric(as.character(IDM_tabl[,35])))\n#check that the 1s are in the correct place\ndim(IDM_tabl)\nIDM_tabl[which(IDM_tabl[,5]!=0),]\nclass(IDM_tabl)\n#IDM_tabl <- as.data.frame(IDM_tabl)\nsaveRDS(IDM_tabl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/IDM_table.Rds\")\nsaveRDS(IDM_tabl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/IDM_table_full.Rds\")\n```\n\n#INDEL LOW\n```{r}\n\n#Making the table\noptions(stringsAsFactors = FALSE)\n#Only run if starting here: genelist_IDL <- readRDS(\"/Volumes/home/greally-lab/T_Trial/Tables/genelist_snvh.Rds\")\n#IDL_tabl <- as.data.frame(rep(0,nrow(genelist_IDL)), row.names =genelist_IDL)\n\n\n#stopped here - RUN TOY DATA\ntoy_IDL <-files_IDL[1:10]\n#defining Temp outside of the function to prevent it's repeated emptying\ntemp <- full_gene_list\nIDL_tabl <- temp\nx <- files_IDL[242]\nfor (i in 1:length(files_IDL)){\n  x<- files_IDL[i]\n  base <- tools::file_path_sans_ext(basename(x))\n  base <- gsub(\"_pINDELLOW\",\"\",base)\n  named_IDL <- c(base,\"genes\")\n   if (file.size(x)>0){\n    mini_table <- read.table(x, header =FALSE, fill = TRUE)\n   #sum(mini_table[,1])\n   #head(mini_table)\n    if(mini_table[1,2] == \"\"){\n          mini_table <- mini_table[2:nrow(mini_table),]\n        }\n    colnames(mini_table) <- named_IDL\n    column <- merge(temp,mini_table, by.x = \"GENES\",by.y=\"genes\", all=TRUE)\n    column[is.na(column)] <- 0\n    IDL_tabl <- merge(IDL_tabl, column, by=\"GENES\", all=TRUE)\n}\n  else{\n    empty_table <- cbind(rep(0,nrow(temp)), temp)\n    #head(empty_table)\n    colnames(empty_table)<-named_IDL\n    column <- merge(temp,empty_table, by.x = \"GENES\",by.y=\"genes\",all = TRUE)\n    IDL_tabl <- merge(IDL_tabl, column, by=\"GENES\", all=TRUE)\n  }\n}\n\nhead(IDL_tabl, 10)\n#check that the second pt column has 11 1s in it\nsum(as.numeric(as.character(IDL_tabl[,243])))\n#check that the 1s are in the correct place\ndim(IDL_tabl)\nIDL_tabl[which(IDL_tabl[,5]!=0),]\nclass(IDL_tabl)\n#IDL_tabl <- as.data.frame(IDL_tabl)\nsaveRDS(IDL_table, file = \"/Volumes/home/greally-lab/T_Trial/Tables/IDL_table.Rds\")\nsaveRDS(IDL_tabl, file = \"/Volumes/home/greally-lab/T_Trial/Tables/IDL_table_full.Rds\")\n```\n\n#testing to see what output I get from reading in each file\n```{r}\n  b <- read.table(\"/Volumes/home/greally-lab/T_Trial/Tables/0189de34-fb68-471f-b0bd-e9a27bfaa3c4_pSNVHIGH.txt\", header = F)\n  #make that matrix entry = [match,x] set that equal to x$v1[i] else set equal to 0\n  snvh_tab <- cbind(genelist,0)\n  snvh_table <- genelist\n```\n  #This is the code I used to make each column for the matrix      \n\n  \n```{r}\n    for (i in 1:length(b$V2)){\n    c <- b$V2[i]\n    match <- charmatch(c,snvh_table)\n     print(match)\n     #print(b)\n     snvh_tab[match,2] <- b$V1[i]\n    }\n    colnames(snvh_tab)[,2] <- \"burrito\"\n     new_row <- as.matrix(snvh_tab[,\"burrito\"])\n     View(new_row)\n    \n      #for(j in 1:length(match))\n      #{\n      #if(snvh_table==match[j]){\n      #snvh_tab[match,2] <- b$V1[i]}\n        #else{\n        #snvh_tab[,2] = 0\n        #}\n      \n  }\n    matchb <- charmatch(b$v2,snvh_table$V1)\n    \n    \n #t <- read.table(x, header=F)\n #colnames(t) <- c(\"counts\", basename)\n #create a table of all the gene names\n   #if(t(!duplicated(t$basename))){ \n   #}\n   \nbutt_2 <- b$head\nmonkey <-as.vector(b$bitch)\nmonkeybutt <-table(monkey,butt)\nView(monkeybutt)\ncolnames(b) <- c(\"head\",\"bitch\")\nmonkey_2 <-monkey[!duplicated(monkey)]\nView(monkey)\n```\n\n ## Including Plots\n\n```{r pressure, echo=FALSE}\n \n```\n\n Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.\n ",
    "created" : 1506459430565.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4110922137",
    "id" : "4D0F26C9",
    "lastKnownWriteTime" : 1507778028,
    "last_content_update" : 1507931778964,
    "path" : "~/Documents/Git/CRC_basics/Tables/Tables.Rmd",
    "project_path" : "Tables.Rmd",
    "properties" : {
        "chunk_output_type" : "inline",
        "docOutlineVisible" : "0",
        "last_setup_crc32" : ""
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}